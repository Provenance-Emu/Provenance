# Xcode
# Build, test, and archive an Xcode workspace on macOS.
# Add steps that install certificates, test, sign, and distribute an app, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/xcode

pool:
  vmImage: 'macOS-latest'

variables:
  xcWorkspacePath: "Provenance.xcworkspace"
  ${{ if contains('main,develop,release', variables['Build.SourceBranchName']) }}:
    configuration: 'Release'
  ${{ if not(contains('main,develop', variables['Build.SourceBranchName'])) }}:
    configuration: 'Debug'
  name: $(Build.SourceBranchName)
  tag: $(Build.BuildNumber)
  CertificateFileName: 'itunes-adhoc.p12'
  ExportOptionsFileName: 'options.plist'
  ExportMethod: 'development'
  # xcode-version: '12.5.1'
  xcodeVersion: '12'  # Options: 8, 9, 11, 12, default, specifyPath
  sdk: 'iphoneos'
  scheme: 'Provenance'
  destinationPlatformOption: iOS

# strategy:
#   matrix:
#     ios:
#       sdk: 'iphoneos'
#       scheme: 'Provenance'
#       destinationPlatformOption: iOS
#     tvos:
#       sdk: 'appletvos'
#       scheme: 'ProvenanceTV'
#       destinationPlatformOption: tvOS
#   maxParallel: 3

steps:

- checkout: self # self represents the repo where the initial Pipelines YAML file was found
  clean: false  # if true, run `execute git clean -ffdx && git reset --hard HEAD` before fetching
  submodules: recursive  # set to 'true' for a single level of submodules or 'recursive' to get submodules of submodules; defaults to not checking out submodules

# - task: InstallAppleCertificate@2
#   inputs:
#     certSecureFile: $(CertificateFileName)
#     certPwd: '$(P12password)'
#     keychain: 'temp'
# - task: InstallAppleProvisioningProfile@1
#   inputs:
#     provisioningProfileLocation: 'secureFiles'
#     provProfileSecureFile: $(ProfileFileName)
#     removeProfile: true

- task: Xcode@5
  inputs:
    scheme: '$(scheme)'
    xcWorkspacePath: '$(xcWorkspacePath)'
    xcodeVersion: '$(xcodeVersion)'
    exportPath: '$(agent.buildDirectory)/output/$(sdk)/$(configuration)'
    packageApp: false
    destinationPlatformOption: $(destinationPlatformOption)
    useXcpretty: false
    configuration: '$(configuration)'
    exportMethod: '$(ExportMethod)'
  displayName: Building project $(scheme)

# - task: Xcode@5
#   inputs:
#     actions: 'test'
#     scheme: '$(scheme)'
#     xcWorkspacePath: 'Provenance.xcworkspace'
#     xcodeVersion: '12' # Options: 8, 9, default, specifyPath
#     packageApp: true
#     destinationPlatformOption: iOS
#     destinationSimulators: iPhone XS
#   displayName: Running tests
