//  BuildFlags.xcconfig
//  Created by Joseph Mattiello on 11/1/18.

// All
OTHER_CFLAGS = $(inherited) -DTARGET_NO_NIXPROF
OTHER_CFLAGS = $(inherited) -ffast-math
OTHER_CFLAGS = $(inherited) -fno-strict-aliasing
OTHER_CFLAGS = $(inherited) -fpermissive
OTHER_CFLAGS = $(inherited) -frename-registers
OTHER_CFLAGS = $(inherited) -fsingle-precision-constant
OTHER_CFLAGS = $(inherited) -ftree-vectorize
// Experimental
OTHER_CFLAGS = $(inherited) -Wl,--gc-sections
//OTHER_CFLAGS = $(inherited) -fdata-sections
//OTHER_CFLAGS = $(inherited) -ffunction-sections
//OTHER_CFLAGS = $(inherited) -finline-functions
//OTHER_CFLAGS = $(inherited) -finline-limit=1000
OTHER_CFLAGS = $(inherited) -flto=thin
OTHER_CFLAGS = $(inherited) -fomit-frame-pointer
//OTHER_CFLAGS = $(inherited) -fstrict-aliasing
OTHER_CFLAGS = $(inherited) -funsafe-math-optimizations
OTHER_CFLAGS = $(inherited) -fvectorize

//Note that:
//The -mcpu flag optimizes specifically for the target CPU architecture
//The -mtune flag optimizes for the target CPU but maintains compatibility with older architectures

OTHER_CFLAGS = $(inherited) -mcpu=apple-a10  // iPhone 7/7+, iPad 6th gen, Apple TV 4K 1st gen
//OTHER_CFLAGS = $(inherited) -mtune=apple-a10 // iPhone 7/7+, iPad 6th gen, Apple TV 4K 1st gen
//OTHER_CFLAGS = $(inherited) -mcpu=apple-a12  // iPhone XR/XS/XS Max, iPad 8th gen, iPad Air 3, iPad mini 5, Apple TV 4K 2nd gen
//OTHER_CFLAGS = $(inherited) -mtune=apple-a12   // iPhone XR/XS/XS Max, iPad 8th gen, iPad Air 3, iPad mini 5, Apple TV 4K 2nd gen
//OTHER_CFLAGS = $(inherited) -mtune=apple-a14   // iPhone 12 series, iPad Air 4th gen, iPad 10th gen
//OTHER_CFLAGS = $(inherited) -mcpu=apple-a15  // iPhone 13 series, iPhone 14/14+, iPad mini 6, Apple TV 4K 3rd gen
OTHER_CFLAGS = $(inherited) -mtune=apple-a15  // iPhone 13 series, iPhone 14/14+, iPad mini 6, Apple TV 4K 3rd gen
//OTHER_CFLAGS = $(inherited) -mcpu=apple-a16
//OTHER_CFLAGS = $(inherited) -mcpu=apple-a17  // iPhone 15 Pro/Pro Max
//OTHER_CFLAGS = $(inherited) -mcpu=apple-a18    // iPhone 16/16+, iPhone 16 Pro/Pro Max
//OTHER_CFLAGS = $(inherited) -mtune=apple-a18   // iPhone 16/16+, iPhone 16 Pro/Pro Max
OTHER_CFLAGS = $(inherited) -march=armv8-a+simd // 34-36fps kirby top screen level 1

GCC_PREPROCESSOR_DEFINITIONS = $(inherited) HAVE_AUDIOTOOLBOX
GCC_PREPROCESSOR_DEFINITIONS = $(inherited) CPPHTTPLIB_OPENSSL_SUPPORT
//GCC_PREPROCESSOR_DEFINITIONS = $(inherited) ENABLE_WEB_SERVICE
GCC_PREPROCESSOR_DEFINITIONS = $(inherited) HAVE_OPENAL
GCC_PREPROCESSOR_DEFINITIONS = $(inherited) HAVE_SDL2
//GCC_PREPROCESSOR_DEFINITIONS = $(inherited) CITRA_ARCH_arm64 // Overrides boost
GCC_PREPROCESSOR_DEFINITIONS = $(inherited) HAVE_COREAUDIO
//GCC_PREPROCESSOR_DEFINITIONS = $(inherited) ENABLE_VULKAN // Already on by default

//OTHER_CPPFLAGS = $(inherited) -fmodules -fcxx-modules
OTHER_LDFLAGS = $(inherited) -ObjC -DIPHONEOS

// Swift <--> C++ Interop
// 1. Include the "MYSWIFTMODULENAME-Swift.h" header from your C++ code. (Where MYSWIFTMODULENAME is your Swift moduleâ€™s name)
// 2. Create the Swift object by calling the MYSWIFTMODULENAME::MYSWIFTCLASSNAME::init() method. (with your initializer's arguments)
SWIFT_OBJC_INTEROP_MODE = objcxx

// Device
GCC_PREPROCESSOR_DEFINITIONS[sdk=iphoneos*] = $(inherited) TARGET_IPHONE=1
OTHER_CFLAGS[sdk=iphoneos*] = $(inherited) 

// Simulator
GCC_PREPROCESSOR_DEFINITIONS[sdk=iphonesimulator*] = $(inherited) TARGET_IPHONE_SIMULATOR=1
EXCLUDED_SOURCE_FILE_NAMES[sdk=iphonesimulator*] = *
INCLUDED_SOURCE_FILE_NAMES[sdk=iphonesimulator*] = PVDebug.c

// tvOS Device
GCC_PREPROCESSOR_DEFINITIONS[sdk=appletvos*] = $(inherited) TARGET_IPHONE=1
//EXCLUDED_SOURCE_FILE_NAMES[sdk=appletvos*][arch=*] = *
//INCLUDED_SOURCE_FILE_NAMES[sdk=appletvos*][arch=*] = PVDebug.c

// tvOS Simulator
GCC_PREPROCESSOR_DEFINITIONS[sdk=appletvsimulator*] = $(inherited) TARGET_IPHONE_SIMULATOR=1
EXCLUDED_SOURCE_FILE_NAMES[sdk=appletvsimulator*][arch=*] = *
INCLUDED_SOURCE_FILE_NAMES[sdk=appletvsimulator*][arch=*] = PVDebug.c

//Kept in same TARGET_BUILD_DIR as others
//BUILD_DIR = $(SRCROOT)/lib
OBJROOT = $(SRCROOT)/lib/emuthree
SYMROOT = $(SRCROOT)/lib/emuthree
PROJECT_TEMP_DIR = $(SRCROOT)/lib/emuthree/build/$(PROJECT_NAME).build
CACHE_ROOT = $(SRCROOT)/lib/cache
DERIVED_FILE_DIR = $(SRCROOT)/lib/emuthree/build/derived/$(PROJECT_NAME).build
