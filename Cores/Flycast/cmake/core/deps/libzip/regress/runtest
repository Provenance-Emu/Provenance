#!/usr/bin/env perl

#  runtest -- run regression tests
#  Copyright (C) 2002-2014 Dieter Baron and Thomas Klausner
#
#  This file is part of ckmame, a program to check rom sets for MAME.
#  The authors can be contacted at <ckmame@nih.at>
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions
#  are met:
#  1. Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in
#     the documentation and/or other materials provided with the
#     distribution.
#  3. The names of the authors may not be used to endorse or promote
#     products derived from this software without specific prior
#     written permission.
# 
#  THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS
#  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#  ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY
#  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
#  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
#  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
#  IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
#  IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


use strict;

BEGIN { push @INC, '/Users/seiryu/Code/Provenance/Cores/Flycast/flycast/core/deps/libzip/regress'; }

use NiHTest;

my $test = NiHTest::new({ default_program => 'ziptool_regress', srcdir => '/Users/seiryu/Code/Provenance/Cores/Flycast/flycast/core/deps/libzip/regress', top_builddir => '/Users/seiryu/Code/Provenance/Cores/Flycast/cmake/core/deps/libzip', zipcmp => '../../src/zipcmp', zipcmp_flags => '-p' });

sub mangle_test {
	my ($test, $variant) = @_;

	if (defined($test->{test}->{preload})) {
		if (!defined($test->{test}->{features})) {
			$test->{test}->{features} = [];
		}
		push @{$test->{test}->{features}}, 'SHARED';
	}

	return 1;
}


$test->add_comparator('zip/zip', \&NiHTest::comparator_zip);
$test->add_hook('post_parse', \&mangle_test);

$test->run(@ARGV);
